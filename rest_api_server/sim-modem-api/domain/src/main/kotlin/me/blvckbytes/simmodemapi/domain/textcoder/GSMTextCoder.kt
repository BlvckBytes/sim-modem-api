package me.blvckbytes.simmodemapi.domain.textcoder

import me.blvckbytes.simmodemapi.domain.exception.IllegalCharacterException

object GSMTextCoder : TextCoder {

  override fun encode(value: String): ByteArray {
    // Worst case: Each character needs two bytes for encoding
    val result = ByteArray(value.length * 2)
    var resultPointer = 0

    for (char in value.toCharArray()) {
      val gsmCode = when (char) {
        '@' ->      0x00 // (At sign)
        '£' ->      0x01 // (Pound sign)
        '$' ->      0x02 // (Dollar sign)
        '¥' ->      0x03 // (Yuan/Yen sign)
        'è' ->      0x04 // (Small letter e with grave accent)
        'é' ->      0x05 // (Small letter e with acute accent)
        'ù' ->      0x06 // (Small letter u with grave accent)
        'ì' ->      0x07 // (Small letter i with grave accent)
        'ò' ->      0x08 // (Small letter o with grave accent)
        'Ç' ->      0x09 // (Capital letter C with cedilla)
        '\n' ->     0x0A // (Linefeed)
        'Ø' ->      0x0B // (Capital letter O with stroke)
        'ø' ->      0x0C // (Small letter o with stroke)
        '\r' ->     0x0D // (Carriage return)
        'Å' ->      0x0E // (Capital letter A with ring)
        'å' ->      0x0F // (Small letter a with ring)
        'Δ' ->      0x10 // (Capital letter Greek delta)
        '_' ->      0x11 // (Underscore)
        'Φ' ->      0x12 // (Capital letter Greek phi)
        'Γ' ->      0x13 // (Capital letter Greek gamma)
        'Λ' ->      0x14 // (Capital letter Greek lambda)
        'Ω' ->      0x15 // (Capital letter Greek omega)
        'Π' ->      0x16 // (Capital letter Greek pi)
        'Ψ' ->      0x17 // (Capital letter Greek psi)
        'Σ' ->      0x18 // (Capital letter Greek sigma)
        'Θ' ->      0x19 // (Capital letter Greek theta)
        'Ξ' ->      0x1A // (Capital letter Greek xi)
        '\u001B' -> 0x1B // (Escape)
        '\u000C' -> 0x1B0A // (Form feed)
        '^' ->      0x1B14 // (Caret / Circumflex)
        '{' ->      0x1B28 // (Left curly bracket)
        '}' ->      0x1B29 // (Right curly bracket)
        '\\' ->     0x1B2F // (Backslash)
        '[' ->      0x1B3C // (Left square bracket)
        '~' ->      0x1B3D // (Tilde)
        ']' ->      0x1B3E // (Right square bracket)
        '|' ->      0x1B40 // (Vertical bar)
        '€' ->      0x1B65 // (Euro sign)
        'Æ' ->      0x1C // (Capital letter AE)
        'æ' ->      0x1D // (Small letter ae)
        'ß' ->      0x1E // (Small letter German Eszett)
        'É' ->      0x1F // (Capital letter E with acute accent)
        ' ' ->      0x20 // (Space)
        '!' ->      0x21 // (Exclamation mark)
        '"' ->      0x22 // (Quotation mark)
        '#' ->      0x23 // (Number sign)
        '¤' ->      0x24 // (Currency sign)
        '%' ->      0x25 // (Percent sign)
        '&' ->      0x26 // (Ampersand)
        '\'' ->     0x27 // (Apostrophe)
        '(' ->      0x28 // (Left parenthesis)
        ')' ->      0x29 // (Right parenthesis)
        '*' ->      0x2A // (Asterisk)
        '+' ->      0x2B // (Plus sign)
        ',' ->      0x2C // (Comma)
        '-' ->      0x2D // (Minus sign / Hyphen)
        '.' ->      0x2E // (Full stop / Period)
        '/' ->      0x2F // (Slash)
        '0' ->      0x30 // (Digit zero)
        '1' ->      0x31 // (Digit one)
        '2' ->      0x32 // (Digit two)
        '3' ->      0x33 // (Digit three)
        '4' ->      0x34 // (Digit four)
        '5' ->      0x35 // (Digit five)
        '6' ->      0x36 // (Digit six)
        '7' ->      0x37 // (Digit seven)
        '8' ->      0x38 // (Digit eight)
        '9' ->      0x39 // (Digit nine)
        ':' ->      0x3A // (Colon)
        ';' ->      0x3B // (Semicolon)
        '<' ->      0x3C // (Less-than sign)
        '=' ->      0x3D // (Equals sign)
        '>' ->      0x3E // (Greater-than sign)
        '?' ->      0x3F // (Question mark)
        '¡' ->      0x40 // (Inverted exclamation mark)
        'A' ->      0x41 // (Capital letter A)
        'B' ->      0x42 // (Capital letter B)
        'C' ->      0x43 // (Capital letter C)
        'D' ->      0x44 // (Capital letter D)
        'E' ->      0x45 // (Capital letter E)
        'F' ->      0x46 // (Capital letter F)
        'G' ->      0x47 // (Capital letter G)
        'H' ->      0x48 // (Capital letter H)
        'I' ->      0x49 // (Capital letter I)
        'J' ->      0x4A // (Capital letter J)
        'K' ->      0x4B // (Capital letter K)
        'L' ->      0x4C // (Capital letter L)
        'M' ->      0x4D // (Capital letter M)
        'N' ->      0x4E // (Capital letter N)
        'O' ->      0x4F // (Capital letter O)
        'P' ->      0x50 // (Capital letter P)
        'Q' ->      0x51 // (Capital letter Q)
        'R' ->      0x52 // (Capital letter R)
        'S' ->      0x53 // (Capital letter S)
        'T' ->      0x54 // (Capital letter T)
        'U' ->      0x55 // (Capital letter U)
        'V' ->      0x56 // (Capital letter V)
        'W' ->      0x57 // (Capital letter W)
        'X' ->      0x58 // (Capital letter X)
        'Y' ->      0x59 // (Capital letter Y)
        'Z' ->      0x5A // (Capital letter Z)
        'Ä' ->      0x5B // (Capital letter A with diaeresis)
        'Ö' ->      0x5C // (Capital letter O with diaeresis)
        'Ñ' ->      0x5D // (Capital letter N with tilde)
        'Ü' ->      0x5E // (Capital letter U with diaeresis)
        '§' ->      0x5F // (Section sign)
        '¿' ->      0x60 // (Inverted question mark)
        'a' ->      0x61 // (Small letter a)
        'b' ->      0x62 // (Small letter b)
        'c' ->      0x63 // (Small letter c)
        'd' ->      0x64 // (Small letter d)
        'e' ->      0x65 // (Small letter e)
        'f' ->      0x66 // (Small letter f)
        'g' ->      0x67 // (Small letter g)
        'h' ->      0x68 // (Small letter h)
        'i' ->      0x69 // (Small letter i)
        'j' ->      0x6A // (Small letter j)
        'k' ->      0x6B // (Small letter k)
        'l' ->      0x6C // (Small letter l)
        'm' ->      0x6D // (Small letter m)
        'n' ->      0x6E // (Small letter n)
        'o' ->      0x6F // (Small letter o)
        'p' ->      0x70 // (Small letter p)
        'q' ->      0x71 // (Small letter q)
        'r' ->      0x72 // (Small letter r)
        's' ->      0x73 // (Small letter s)
        't' ->      0x74 // (Small letter t)
        'u' ->      0x75 // (Small letter u)
        'v' ->      0x76 // (Small letter v)
        'w' ->      0x77 // (Small letter w)
        'x' ->      0x78 // (Small letter x)
        'y' ->      0x79 // (Small letter y)
        'z' ->      0x7A // (Small letter z)
        'ä' ->      0x7B // (Small letter a with diaeresis)
        'ö' ->      0x7C // (Small letter o with diaeresis)
        'ñ' ->      0x7D // (Small letter n with tilde)
        'ü' ->      0x7E // (Small letter u with diaeresis)
        'à' ->      0x7F // (Small letter a with grave accent)

        else -> throw IllegalCharacterException()
      }

      if (gsmCode > 0xFF)
        result[resultPointer++] = ((gsmCode shr 8) and 0xFF).toByte()

      result[resultPointer++] = (gsmCode and 0xFF).toByte()
    }

    return result.sliceArray(0 until resultPointer)
  }

  override fun decode(value: ByteArray): String? {
    var i = 0

    val result = StringBuilder()

    while (i < value.size) {
      val currentByte = value[i++].toInt() and 0xFF

      // Escape character, makes up a special character with the next byte
      if (currentByte == 0x1B) {
        result.append(when(value[i++].toInt() and 0xFF) {
          0x0A -> '\u000C' // (Form feed)
          0x14 -> '^' // (Caret / Circumflex)
          0x28 -> '{' // (Left curly bracket)
          0x29 -> '}' // (Right curly bracket)
          0x2F -> '\\' // (Backslash)
          0x3C -> '[' // (Left square bracket)
          0x3D -> '~' // (Tilde)
          0x3E -> ']' // (Right square bracket)
          0x40 -> '|' // (Vertical bar)
          0x65 -> '€' // (Euro sign)

          // Was not an escape sequence, just take the escape character as is and
          // "put back" the next byte
          else -> {
            --i
            '\u001B'
          }
        })
        continue
      }

      result.append(when (currentByte) {
        0x00 -> '@' // (At sign)
        0x01 -> '£' // (Pound sign)
        0x02 -> '$' // (Dollar sign)
        0x03 -> '¥' // (Yuan/Yen sign)
        0x04 -> 'è' // (Small letter e with grave accent)
        0x05 -> 'é' // (Small letter e with acute accent)
        0x06 -> 'ù' // (Small letter u with grave accent)
        0x07 -> 'ì' // (Small letter i with grave accent)
        0x08 -> 'ò' // (Small letter o with grave accent)
        0x09 -> 'Ç' // (Capital letter C with cedilla)
        0x0A -> '\n' // (Linefeed)
        0x0B -> 'Ø' // (Capital letter O with stroke)
        0x0C -> 'ø' // (Small letter o with stroke)
        0x0D -> '\r' // (Carriage return)
        0x0E -> 'Å' // (Capital letter A with ring)
        0x0F -> 'å' // (Small letter a with ring)
        0x10 -> 'Δ' // (Capital letter Greek delta)
        0x11 -> '_' // (Underscore)
        0x12 -> 'Φ' // (Capital letter Greek phi)
        0x13 -> 'Γ' // (Capital letter Greek gamma)
        0x14 -> 'Λ' // (Capital letter Greek lambda)
        0x15 -> 'Ω' // (Capital letter Greek omega)
        0x16 -> 'Π' // (Capital letter Greek pi)
        0x17 -> 'Ψ' // (Capital letter Greek psi)
        0x18 -> 'Σ' // (Capital letter Greek sigma)
        0x19 -> 'Θ' // (Capital letter Greek theta)
        0x1A -> 'Ξ' // (Capital letter Greek xi)
        0x1C -> 'Æ' // (Capital letter AE)
        0x1D -> 'æ' // (Small letter ae)
        0x1E -> 'ß' // (Small letter German Eszett)
        0x1F -> 'É' // (Capital letter E with acute accent)
        0x20 -> ' ' // (Space)
        0x21 -> '!' // (Exclamation mark)
        0x22 -> '"' // (Quotation mark)
        0x23 -> '#' // (Number sign)
        0x24 -> '¤' // (Currency sign)
        0x25 -> '%' // (Percent sign)
        0x26 -> '&' // (Ampersand)
        0x27 -> '\'' // (Apostrophe)
        0x28 -> '(' // (Left parenthesis)
        0x29 -> ')' // (Right parenthesis)
        0x2A -> '*' // (Asterisk)
        0x2B -> '+' // (Plus sign)
        0x2C -> ',' // (Comma)
        0x2D -> '-' // (Minus sign / Hyphen)
        0x2E -> '.' // (Full stop / Period)
        0x2F -> '/' // (Slash)
        0x30 -> '0' // (Digit zero)
        0x31 -> '1' // (Digit one)
        0x32 -> '2' // (Digit two)
        0x33 -> '3' // (Digit three)
        0x34 -> '4' // (Digit four)
        0x35 -> '5' // (Digit five)
        0x36 -> '6' // (Digit six)
        0x37 -> '7' // (Digit seven)
        0x38 -> '8' // (Digit eight)
        0x39 -> '9' // (Digit nine)
        0x3A -> ':' // (Colon)
        0x3B -> ';' // (Semicolon)
        0x3C -> '<' // (Less-than sign)
        0x3D -> '=' // (Equals sign)
        0x3E -> '>' // (Greater-than sign)
        0x3F -> '?' // (Question mark)
        0x40 -> '¡' // (Inverted exclamation mark)
        0x41 -> 'A' // (Capital letter A)
        0x42 -> 'B' // (Capital letter B)
        0x43 -> 'C' // (Capital letter C)
        0x44 -> 'D' // (Capital letter D)
        0x45 -> 'E' // (Capital letter E)
        0x46 -> 'F' // (Capital letter F)
        0x47 -> 'G' // (Capital letter G)
        0x48 -> 'H' // (Capital letter H)
        0x49 -> 'I' // (Capital letter I)
        0x4A -> 'J' // (Capital letter J)
        0x4B -> 'K' // (Capital letter K)
        0x4C -> 'L' // (Capital letter L)
        0x4D -> 'M' // (Capital letter M)
        0x4E -> 'N' // (Capital letter N)
        0x4F -> 'O' // (Capital letter O)
        0x50 -> 'P' // (Capital letter P)
        0x51 -> 'Q' // (Capital letter Q)
        0x52 -> 'R' // (Capital letter R)
        0x53 -> 'S' // (Capital letter S)
        0x54 -> 'T' // (Capital letter T)
        0x55 -> 'U' // (Capital letter U)
        0x56 -> 'V' // (Capital letter V)
        0x57 -> 'W' // (Capital letter W)
        0x58 -> 'X' // (Capital letter X)
        0x59 -> 'Y' // (Capital letter Y)
        0x5A -> 'Z' // (Capital letter Z)
        0x5B -> 'Ä' // (Capital letter A with diaeresis)
        0x5C -> 'Ö' // (Capital letter O with diaeresis)
        0x5D -> 'Ñ' // (Capital letter N with tilde)
        0x5E -> 'Ü' // (Capital letter U with diaeresis)
        0x5F -> '§' // (Section sign)
        0x60 -> '¿' // (Inverted question mark)
        0x61 -> 'a' // (Small letter a)
        0x62 -> 'b' // (Small letter b)
        0x63 -> 'c' // (Small letter c)
        0x64 -> 'd' // (Small letter d)
        0x65 -> 'e' // (Small letter e)
        0x66 -> 'f' // (Small letter f)
        0x67 -> 'g' // (Small letter g)
        0x68 -> 'h' // (Small letter h)
        0x69 -> 'i' // (Small letter i)
        0x6A -> 'j' // (Small letter j)
        0x6B -> 'k' // (Small letter k)
        0x6C -> 'l' // (Small letter l)
        0x6D -> 'm' // (Small letter m)
        0x6E -> 'n' // (Small letter n)
        0x6F -> 'o' // (Small letter o)
        0x70 -> 'p' // (Small letter p)
        0x71 -> 'q' // (Small letter q)
        0x72 -> 'r' // (Small letter r)
        0x73 -> 's' // (Small letter s)
        0x74 -> 't' // (Small letter t)
        0x75 -> 'u' // (Small letter u)
        0x76 -> 'v' // (Small letter v)
        0x77 -> 'w' // (Small letter w)
        0x78 -> 'x' // (Small letter x)
        0x79 -> 'y' // (Small letter y)
        0x7A -> 'z' // (Small letter z)
        0x7B -> 'ä' // (Small letter a with diaeresis)
        0x7C -> 'ö' // (Small letter o with diaeresis)
        0x7D -> 'ñ' // (Small letter n with tilde)
        0x7E -> 'ü' // (Small letter u with diaeresis)
        0x7F -> 'à' // (Small letter a with grave accent)

        // Illegal character
        else -> return null
      })
    }

    return result.toString()
  }
}